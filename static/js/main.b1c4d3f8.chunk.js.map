{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["isOperator","endsWithOperator","endsWithNegativeSign","clearStyle","background","operatorStyle","equalsStyle","position","height","bottom","App","props","state","currentVal","prevVal","formula","currentSign","lastClicked","maxDigitWarning","bind","handleOperators","handleEvaluate","initialize","handleDecimal","handleNumbers","this","setState","setTimeout","includes","expression","test","slice","replace","answer","Math","round","eval","toString","evaluated","e","value","target","momWert","ausgewertet","length","match","className","id","Formula","Output","currentValue","Buttons","decimal","evaluate","numbers","operators","React","Component","style","flex","width","border","display","justifyContent","alignItems","color","fontSize","flexWrap","onClick","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1c4d3f8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst isOperator = /[x/+‑]/,\n  endsWithOperator = /[x+‑/]$/,\n  endsWithNegativeSign = /[x/+]‑$/,\n  clearStyle = { background: \"#ac3939\" },\n  operatorStyle = { background: \"#666666\" },\n  equalsStyle = {\n    background: \"#001266\",\n    position: \"absolute\",\n    height: 160,\n    bottom: 50\n  };\n\n// COMPONENTS:\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\"\n    };\n    this.maxDigitWarning = this.maxDigitWarning.bind(this);\n    this.handleOperators = this.handleOperators.bind(this);\n    this.handleEvaluate = this.handleEvaluate.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleNumbers = this.handleNumbers.bind(this);\n  }\n\n  maxDigitWarning() {\n    this.setState({\n      currentVal: \"Digit Limit Met\",\n      prevVal: this.state.currentVal\n    });\n    setTimeout(() => this.setState({ currentVal: this.state.prevVal }), 1000);\n  }\n\n  handleEvaluate() {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      let expression = this.state.formula;\n      while (endsWithOperator.test(expression)) {\n        expression = expression.slice(0, -1);\n      }\n      expression = expression.replace(/x/g, \"*\").replace(/‑/g, \"-\");\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: answer.toString(),\n        formula:\n          expression.replace(/\\*/g, \"⋅\").replace(/-/g, \"‑\") + \"=\" + answer,\n        prevVal: answer,\n        evaluated: true\n      });\n    }\n  }\n\n  handleOperators(e) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const value = e.target.value;\n      const { formula, prevVal, evaluated } = this.state;\n      this.setState({ currentVal: value, evaluated: false });\n      if (evaluated) {\n        this.setState({ formula: prevVal + value });\n      } else if (!endsWithOperator.test(formula)) {\n        this.setState({\n          prevVal: formula,\n          formula: formula + value\n        });\n      } else if (!endsWithNegativeSign.test(formula)) {\n        this.setState({\n          formula:\n            (endsWithNegativeSign.test(formula + value) ? formula : prevVal) +\n            value\n        });\n      } else if (value !== \"‑\") {\n        this.setState({\n          formula: prevVal + value\n        });\n      }\n    }\n  }\n\n  handleNumbers(e) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const { currentVal: momWert, formula, evaluated } = this.state;\n      const value = e.target.value;\n      this.setState({ ausgewertet: false });\n      if (momWert.length > 21) {\n        this.maxDigitWarning();\n      } else if (evaluated) {\n        this.setState({\n          currentVal: value,\n          formula: value !== \"0\" ? value : \"\"\n        });\n      } else {\n        this.setState({\n          currentVal:\n            momWert === \"0\" || isOperator.test(momWert)\n              ? value\n              : momWert + value,\n          formula:\n            momWert === \"0\" && value === \"0\"\n              ? formula === \"\" ? value : formula\n              : /([^.0-9]0|^0)$/.test(formula)\n                ? formula.slice(0, -1) + value\n                : formula + value\n        });\n      }\n    }\n  }\n\n  handleDecimal() {\n    if (this.state.evaluated === true) {\n      this.setState({\n        currentVal: \"0.\",\n        formula: \"0.\",\n        evaluated: false\n      });\n    } else if (\n      !this.state.currentVal.includes(\".\") &&\n      !this.state.currentVal.includes(\"Limit\")\n    ) {\n      this.setState({ evaluated: false });\n      if (this.state.currentVal.length > 16) {\n        this.maxDigitWarning();\n      } else if (\n        endsWithOperator.test(this.state.formula) ||\n        (this.state.currentVal === \"0\" && this.state.formula === \"\")\n      ) {\n        this.setState({\n          currentVal: \"0.\",\n          formula: this.state.formula + \"0.\"\n        });\n      } else {\n        this.setState({\n          currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + \".\",\n          formula: this.state.formula + \".\"\n        });\n      }\n    }\n  }\n\n  initialize() {\n    this.setState({\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\",\n      evaluated: false\n    });\n  }\n\n  render() {\n    return (\n\n      <div>\n        <div className=\"calculator\">\n          <div className=\"outputScreen\" id=\"display\">\n            <Formula formula={this.state.formula.replace(/x/g, \"⋅\")} />\n            <Output currentValue={this.state.currentVal} />\n          </div>\n          <Buttons\n            decimal={this.handleDecimal}\n            evaluate={this.handleEvaluate}\n            initialize={this.initialize}\n            numbers={this.handleNumbers}\n            operators={this.handleOperators}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst style = {\n  flex: \"1\",\n  width: \"80px\",\n  height: \"80px\",\n  border: \"none\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  color: \"#000\",\n  fontSize: 32\n};\n\n\nconst flex = { display: \"flex\", flexWrap: \"wrap\", width: \"400px\" }\nclass Buttons extends React.Component {\n  render() {\n    return (\n      <div>\n        <div style={flex}>\n          <button\n            className=\"jumbo cp\"\n            id=\"clear\"\n            onClick={this.props.initialize}\n            style={style}\n            value=\"AC\"\n          >\n            AC\n        </button>\n          <button\n            id=\"divide\"\n            className=\"cp\"\n            onClick={this.props.operators}\n            style={style}\n            value=\"/\"\n          >\n            /\n        </button>\n          <button\n            className=\"cp\"\n            id=\"multiply\"\n            onClick={this.props.operators}\n            style={style}\n            value=\"x\"\n          >\n            x\n        </button>\n          <button className=\"cp\" style={style} id=\"decimal\" onClick={this.props.decimal} value=\".\">\n            .\n        </button>\n        </div>\n        <div style={flex}>\n          <button className=\"number\" id=\"seven\" style={style} onClick={this.props.numbers} value=\"7\">\n            7\n        </button>\n          <button className=\"number\" id=\"eight\" style={style} onClick={this.props.numbers} value=\"8\">\n            8\n        </button>\n          <button className=\"number\" id=\"nine\" style={style} onClick={this.props.numbers} value=\"9\">\n            9\n        </button>\n          <button\n            className=\"cp\"\n            id=\"subtract\"\n            onClick={this.props.operators}\n            style={style}\n            value=\"‑\"\n          >\n            -\n        </button>\n        </div>\n        <div style={flex}>\n          <button className=\"number\" id=\"four\" style={style} onClick={this.props.numbers} value=\"4\">\n            4\n        </button>\n          <button className=\"number\" id=\"five\" style={style} onClick={this.props.numbers} value=\"5\">\n            5\n        </button>\n          <button className=\"number\" id=\"six\" style={style} onClick={this.props.numbers} value=\"6\">\n            6\n        </button>\n          <button\n            className=\"cp\"\n            id=\"equals\"\n            onClick={this.props.evaluate}\n            style={style}\n            value=\"=\"\n          >\n            =\n        </button>\n\n        </div>\n        <div style={flex}>\n          <button className=\"number\" id=\"one\" onClick={this.props.numbers} style={style} value=\"1\">\n            1\n        </button>\n          <button className=\"number\" id=\"two\" onClick={this.props.numbers} style={style} value=\"2\">\n            2\n        </button>\n          <button className=\"number\" id=\"three\" onClick={this.props.numbers} style={style} value=\"3\">\n            3\n        </button>\n\n\n\n          <button\n            className=\"cp\"\n            id=\"add\"\n            onClick={this.props.operators}\n            style={style}\n            value=\"+\"\n          >\n            +\n        </button>\n        </div>\n        <div style={flex}>\n          <button\n            className=\"number\"\n            style={style}\n            id=\"zero\"\n            onClick={this.props.numbers}\n            value=\"0\"\n          >\n            0\n        </button >\n          <button className=\"number\" style={style}>\n\n          </button>\n\n          <button className=\"cp\" style={style} id=\"decimal\" onClick={this.props.decimal} value=\".\">\n            ,\n        </button>\n          <button\n            className=\"equals\"\n            id=\"equals\"\n            onClick={this.props.evaluate}\n            style={style}\n            value=\"=\"\n          >\n            =\n        </button>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\nclass Output extends React.Component {\n  render() {\n    return (\n      <div className=\"output\">\n        <div className=\"apple\">\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n        {this.props.currentValue}\n      </div>\n    );\n  }\n}\n\nclass Formula extends React.Component {\n  render() {\n    return <div className=\"formulaScreen\">{this.props.formula}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}